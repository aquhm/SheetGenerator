/*
 * THIS CODE WAS GENERATED BY SHEET-GENERATOR.
 *
 * CHANGES TO THIS FILE MAY CAUSE INCORRECT BEHAVIOR AND WILL BE LOST IF
 * THE CODE IS REGENERATED.
 */

using System.Text;
using System.Runtime.CompilerServices;
using System.Buffers;
using MessagePack;
using SheetGenerator.IO;
using SheetGenerator.Configuration;

namespace {Namespace}
{
    [MessagePackObject]
    public sealed partial class {TableName}Record : IEquatable<{TableName}Record>
    {
        #region Fields
{Properties}
        #endregion

        #region Binary IO
        [SerializationConstructor]
        public {TableName}Record() { }

        public void Read(TableBinaryReader reader, uint[] tags)
        {
            if (reader == null)
            {
                throw new ArgumentNullException(nameof(reader));
            }

            if (tags == null)
            {
                throw new ArgumentNullException(nameof(tags));
            }

            try
            {
                var bytes = reader.GetRemainingBytes();
                if (bytes.Length == 0)
                    throw new InvalidDataException("No data available to read");

                var record = MessagePackSerializer.Deserialize<{TableName}Record>(bytes, MessagePackConfig.Options);
                CopyFrom(record);
            }
            catch (Exception ex)
            {
                throw new InvalidDataException($"Failed to read {nameof({TableName}Record)}", ex);
            }
        }

        private void CopyFrom({TableName}Record source)
        {
{CopyFromContent}
        }

        public void Serialize(IBufferWriter<byte> writer)
        {
            MessagePackSerializer.Serialize(writer, this);
        }

        public static {TableName}Record Deserialize(ReadOnlyMemory<byte> bytes)
        {
            return MessagePackSerializer.Deserialize<{TableName}Record>(bytes);
        }
        #endregion

        #region ToString
        public override string ToString()
        {
            return ToStringInternal();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private string ToStringInternal()
        {
            var sb = new StringBuilder(256);
            sb.Append('{');
{ToStringContent}
            sb.Append('}');
            return sb.ToString();
        }
        #endregion

        #region Equality & GetHashCode
        public bool Equals({TableName}Record other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
{EqualityContent}
        }

        public override bool Equals(object obj)
        {
            return ReferenceEquals(this, obj) || (obj is {TableName}Record other && Equals(other));
        }

        public override int GetHashCode()
        {
            HashCode hash = new();
{HashContent}
            return hash.ToHashCode();
        }

        public static bool operator ==({TableName}Record left, {TableName}Record right)
        {
            return Equals(left, right);
        }

        public static bool operator !=({TableName}Record left, {TableName}Record right)
        {
            return !Equals(left, right);
        }
        #endregion

        #region Indexer
        private readonly struct FieldInfo
        {
            public readonly int Index;
            public readonly Func<{TableName}Record, object> Accessor;

            public FieldInfo(int index, Func<{TableName}Record, object> accessor)
            {
                Index = index;
                Accessor = accessor;
            }
        }

        private static readonly Dictionary<string, FieldInfo> _fieldInfos;
        private static readonly FieldInfo[] _indexedFields;

        static {TableName}Record()
        {
            _fieldInfos = new Dictionary<string, FieldInfo>(StringComparer.Ordinal)
            {
{FieldInfoContent}
            };

            _indexedFields = new FieldInfo[]
            {
{IndexedFieldsContent}
            };
        }

        public object this[int fieldIndex]
        {
            get
            {
                if ((uint)fieldIndex >= _indexedFields.Length)
                    throw new ArgumentOutOfRangeException(nameof(fieldIndex));
                return _indexedFields[fieldIndex].Accessor(this);
            }
        }

        public object this[string fieldName]
        {
            get
            {
                if (fieldName == null)
                {
                    throw new ArgumentNullException(nameof(fieldName));
                }

                if (!_fieldInfos.TryGetValue(fieldName, out var fieldInfo))
                    throw new KeyNotFoundException($"Field '{fieldName}' not found.");
                return fieldInfo.Accessor(this);
            }
        }
        #endregion
    }
}
